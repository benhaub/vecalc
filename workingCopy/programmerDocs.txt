//////////////////////////////////////////////////////////////////
//Author	:	Ben Haubrich				//
//File		:	programmerDocs.txt			//
//Synopsis	:	Information for programming vecalc	//
//////////////////////////////////////////////////////////////////

vecalc is a vector calculator written in C89 that can perform mathematical 
operations on a one dimensional array (vector).

///Structure///
vecalc is a multi file program where each .c contains functions that perform
similar tasks. The structure is as follows:

File	:		Purpose

vecalc.c	:		Main menu - Analyses user input, and selects the
							appropriate operation. This is an infinitely
							looping process that continue until the 'e' or 'q'
							command is issued. If the input is through file
							redirection, then it continues until the 'e' or 'q'
							or blank line is given.

							Includes all the regression testing, which is conditionally
							compiled with -DTESTING or by using the test target within
							makefile.debug
			
			
vecalc.c functions:
										main()

vecalc.h	:		Defines a Vector and an Elem
							Defines maximum size of a vector at 2^16

vectorIn.c	:		Format and check user entered data - Accepts new input 
								from the user. Makes adjustments to entered data so 
								that it can be placed back into argv and sent back to 
								the main menu. Checks for numbers when numbers should
								be present.
			
vectorIn.c functions:
											userIn()
											refreshArgv()
											ensureDigit()
											cleanArgv()

vectorIn.h	:		Defines MAX_INPUT_LENGTH	

vectorOut.c	:		Prints output for the user

vectorOut.c functions:
											getHelp()
											print_vec()
	
vectorMem.c	:		Handles memory allocation and deletion

vectorMem.c functions:
											checkalloc()
											extend_vec()
											dealloc_vec()
											alloc_vec()
			
vectorOps.c	:		Provides all the mathematical operations that can be
								performed on a vector

vectorOps.c functions:
											scalar_plus()
											scalar_minus()
											scalar_div()
											scalar_mult()

///Makefiles///

The following makefiles and targets are available:

makefile	:	standard compilation of vecalc for normal use

Has targets:

vecalc - Complie the vector calculator
dynamic - Compile vecalc with a dynamically loading library
(*** Please ensure that the environment variable changed appropriately. If it did
not change then it can be change manually with:
"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/lib" minus the quotes ***)
clean - remove all object files from cwd
profile - compile with -pg option for use with gprof

makefile.debug	:	Compile vecalc for testing purposes

Has targets:

test - compile vecalc compatiable with symbol table for gdb and with
conditionally compiled test code. This target will also automatically
generate a test file and run vecalc with it as input. The test file is
then deleted.
debug - compile vecalc with just the symbol table for use in gdb 

///Testing///

Testing is a little different for this program given the
constant need for input from the user. If we did a regular
defined block of testing at the bottom, we would need to
be able to keep track of the current state of the program,
and what should change in the next state depending on what 
the user entered.

Testing is automatically handled when the test target is called with make.
The document is built using printf commands that are redirected into a file.
vecalc is then compiled with -DTESTING and ran with the test file redirected as
stdin.

DO NOT CHANGE THE ORDERING OF TESTS

vecalc tests the commands in a known order. The order is kept track of using a
loopCount that dictates which tests should be performed. If you wish to add more 
testing, do so by appending tests onto the end of the test document and add the
tests onto existing tests in vecalc.c (i.e just add more printf commands into
makefile.debug, AFTER the exisiting ones, and add more loopCount dependant
testing AFTER the existing testing in vecalc.c).

When running tests, you may want to consider discarding stderr so it's easier
to see assertion failures.

///Repeat Command///

This is the only command that does not have a function specifically made to handle
this option. Most of its functionality is built into refreshArgv().

///Additional Excutables///
In the vecalc folder you will also find a .c file called vecalcCmdGen.c. This
is a program that generates a text file of 800 randomly generated unique
commands. Not all the commands are error free commands, some of them will cause
vecalc to produce error output. 
